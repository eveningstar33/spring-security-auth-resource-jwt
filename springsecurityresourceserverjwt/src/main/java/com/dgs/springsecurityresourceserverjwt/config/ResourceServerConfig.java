package com.dgs.springsecurityresourceserverjwt.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.TokenStore;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;

// What's different in this app using JWT, is that we don't have any direct communication between the
// Authorization Server and the Resource Server. In the previous app without JWT, you will see that we
// have done the same thing but because we didn't used JWT token I had to create a communication channel
// between the Resource and the Authorization Server and that is the check_token endpoint. So by the 
// check_token endpoint the Resource Server was able to call the Authorization Server to make sure that 
// a specific token was generated by that Authorization Server. But in this case we don't need to have
// this communication anymore and the reason for that is because this token is signed with a key and the
// same key is provided to the Resource Server. So what Resource Server has to do is only to check that 
// the token was signed with that key that was provided to it. And if the key is the correct one, if the
// signature is fine than it means that a token is indeed ok and it was created by the specific Authorization
// Server that you have. 

@Configuration
@EnableResourceServer
public class ResourceServerConfig extends ResourceServerConfigurerAdapter {
	
    @Bean
    public TokenStore tokenStore() {
        return new JwtTokenStore(jwtAccessTokenConverter());
    }

    @Bean
    public JwtAccessTokenConverter jwtAccessTokenConverter() {
    	JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
        converter.setSigningKey("12345");
        return converter;
    }

	@Override
	public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
		resources.tokenStore(tokenStore());
	}
	
}
